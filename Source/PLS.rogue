#================================================================================
# PLS.rogue
# August 15, 2021
#================================================================================

$requireRogue "1.8.8"

uses Utility/CommandLineParser

try
  PLS( System.command_line_arguments )
catch (error:Error)
  local w = Console.width.or_smaller( 80 )
  Console.error.println "="*w
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(w-2).indented(2)
  Console.error.println "="*w
  System.exit 1
endTry

class PLS
  DEFINITIONS
    PLS_HOME = "/opt/pls"

  METHODS
    method init( args:String[] )
      #{
      local command = parse_args( args )
      # 'command' has //options and possibly //args

      if (command//options//help)
        print_usage
        System.exit 0
      endIf
      }#

      #if (not command//args//count) command//args = @[ "install", "abepralle/pls/

      create_folder( PLS_HOME, &chown )
      create_folder( PLS_HOME/"bin" )
      create_folder( PLS_HOME/"build" )
      create_folder( PLS_HOME/"packages" )

      local shellenv = PLS_HOME/"shellenv"
      if (not File.exists(shellenv))
        File.save( shellenv, ''echo export PATH="$/bin${PATH+:$PATH}";''(PLS_HOME,'$','$') )
        execute( "chmod u+x $" (shellenv) )
      endIf

      create_folder( PLS_HOME/"packages/abepralle/hello-world" )
      local from_file = "PLS/hello-world.rogue"
      local to_file   = PLS_HOME/"packages/abepralle/hello-world/hello-world.rogue"
      if (File.is_different_than(from_file,to_file))
        println "> Copy $ -> $" (from_file,to_file)
        File.copy( from_file, to_file )
      endIf

      install( "abepralle", "hello-world" )

    method create_folder( folder:String, &chown )
      if (not File.exists(folder))
        execute( "mkdir -p "+folder, &allow_sudo )

        if (chown)
          local user = System.environment//USER
          execute( "chown $ $" (user,folder), &allow_sudo )
        endIf
      endIf

    method execute( cmd:String, &suppress_error, &allow_sudo )->Logical
      println "> " + cmd
      if (0 == System.run(cmd)) return true

      if (allow_sudo)
        println "Error executing '$'; retrying with 'sudo'."(cmd)
        return execute( "sudo "+cmd, &=suppress_error )
      endIf

      if (suppress_error) return false
      throw Error( "Error executing '$'."(cmd) )

    method header( message:String )
      println "-" * Console.width.or_smaller(80)
      println message
      println "-" * Console.width.or_smaller(80)

    method install( provider:String, app_name:String )
      local package_folder = PLS_HOME/"packages/$/$" (provider,app_name)
      local build_folder = "$/$/$-$" (PLS_HOME,"build",provider,app_name)

      header "Installing $/$" (provider,app_name)

      println "> Create folder " + build_folder
      File.delete( build_folder )
      File.create_folder( build_folder )

      File.copy( package_folder/(app_name+".rogue"), build_folder, &verbose )

      local build = File.esc( build_folder )
      local install_args = @{ :app_name, :package_folder, pls_home:PLS_HOME }.to_json.to_escaped_ascii('"')

      try
        local cmd = "roguec $.rogue Source/Package.rogue --essential --api --compile --output=$/installer" ...
            (package_folder/app_name,build)
        execute cmd
        execute 'cd $ && ./installer "$"' (build,install_args)
      catch (err:Error)
        File.delete( build_folder )
        throw err
      endTry


      #{
      local package = resolve_package( "abepralle/rogo" )

    method resolve_package( name:String )->Package
      # TODO: use any added indices to translate unqualified names to qualified names,
      # e.g. 'rogo' -> 'https://github.com/AbePralle/Rogo.git/rogo

      # Add github url if package does not already include a protocol (like HTTPS) or SSH portion.
      local host : String
      if (name.contains_pattern("@*:"))
        # git@github.com:name/...
        host = name.before_first(':') + ":"
        name .= rightmost( -host.count )

      elseIf (name.contains("://"))
        # https://github.com/name/...
        local protocol = name.before_first("://") + "://"
        name .= rightmost( -protocol.count )
        local _host = name.before_first('/') + '/'
        name .= after_first('/')
        host = protocol + _host

      else
        host = "https://github.com/"

      endIf

      # app
      # user/app
      # user/repo/.../app
      which (name.count('/'))
        case 0
          # 'name' -> 'name/name.git/name' (user/repo/app)
          host += "$/$.git" (name,name)

        case 1
          # 'user/name' -> 'user/name.git/name' (user/repo/app)
          local user = name.before_first('/')
          name .= after_first('/')
          host += "$/$.git" (user,name)

        others
          # user/repo/.../app -> user/repo.git/.../app
          local parts = name.split('/')
          parts[1] = parts[1].with_trailing(".git")
          host += parts.remove_first  # user
          host += '/'
          host += parts.remove_first  # repo.git
          name = parts.join('/')
      endWhich

      return Package( host, name )
    }#


    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println @|USAGE
               |  pls [OPTIONS]
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass
