#================================================================================
# Morlock.rogue
# August 15, 2021
#================================================================================

$requireRogue "1.8.8"

uses Utility/CommandLineParser

#https://raw.githubusercontent.com/abepralle/rogue/master/Build.rogue
#curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/abepralle/rogue

try
  Morlock( System.command_line_arguments )
catch (error:Error)
  local w = Console.width.or_smaller( 80 )
  Console.error.println "="*w
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(w-2).indented(2)
  Console.error.println "="*w
  System.exit 1
endTry

class Morlock
  DEFINITIONS
    HOME = "/opt/morlock"

  METHODS
    method init( args:String[] )
      local command = parse_args( args )
      # 'command' has //options and possibly //args

      if (command//options//help or not command//action or command//action == "help")
        print_usage
        System.exit 0
      endIf

      configure_morlock

      which (command//action)
        case "install"
          local info = resolve_package( command//args.first, &allow_local_script )
          info.fetch_latest_script

        #{
        case "install"
          local package = resolve_package( command//args.first, &allow_local_script )
          install_using_local_script( package )
          #if (not install_using_local_script(package))
          trace package
          # TODO

        case "shellenv"
          local morlock_bin = HOME/"bin"
          if (not System.environment//PATH.contains(morlock_bin))
            print   ''export PATH="$'' (morlock_bin)
            println ''${PATH+:$PATH}";''
          endIf
          }#

        case "uninstall"
          local info = resolve_package( command//args.first, &allow_local_script )
          println System.command_line_arguments
          println info
          #run_script( "uninstall", package )

        others
          throw error( "Unrecognized morlock command '$'."(command//action) )
      endWhich

      #{
      local shellenv = HOME/"shellenv"
      if (not File.exists(shellenv))
        File.save( shellenv, ''echo export PATH="$/bin${PATH+:$PATH}";''(HOME,'$','$') )
        execute( "chmod u+x $" (shellenv) )
      endIf

      create_folder( HOME/"packages/abepralle/hello-world" )
      local from_file = "Morlock/hello-world.rogue"
      local to_file   = HOME/"packages/abepralle/hello-world/hello-world.rogue"
      if (File.is_different_than(from_file,to_file))
        println "> Copy $ -> $" (from_file,to_file)
        File.copy( from_file, to_file )
      endIf

      install( "abepralle", "hello-world" )
      }#

    method configure_morlock
      create_folder( HOME, &chown )
      create_folder( HOME/"bin" )
      create_folder( HOME/"build" )
      create_folder( HOME/"packages" )

    method create_folder( folder:String, &chown )
      if (not File.exists(folder))
        execute( "mkdir -p "+folder, &allow_sudo )

        if (chown)
          local user = System.environment//USER
          execute( "chown $ $" (user,folder), &allow_sudo )
        endIf
      endIf

    method error( message:String )->Error
      return Error( message )

    method execute( cmd:String, &suppress_error, &allow_sudo )->Logical
      println "> " + cmd
      if (0 == System.run(cmd)) return true

      if (allow_sudo)
        println "Error executing '$'; retrying with 'sudo'."(cmd)
        return execute( "sudo "+cmd, &=suppress_error )
      endIf

      if (suppress_error) return false
      throw Error( "Error executing '$'."(cmd) )

    method header( message:String )
      println "-" * Console.width.or_smaller(80)
      println message
      println "-" * Console.width.or_smaller(80)

    method install_using_local_script( package:String )->Logical
      # Returns false if 'package' is not a local file.
      if (package.contains("://") or package.contains_pattern("@*:")) return false
      if (not File.exists(package)) return false

      local provider = File.filename(File.folder(package))
      local app_name = File.filename(package).before_last('.')
      local package_folder = HOME/"packages/$/$" (provider,app_name)
      local script_filepath = "$/$.rogue" (package_folder,app_name)

      File.create_folder( package_folder )
      File.copy( package, script_filepath, &if_different, &verbose )
      install( provider, app_name )

      return true

    method install( provider:String, app_name:String )
      run_script( "install", provider, app_name )

    method run_script( action:String, package:String )
      if (package.contains("://"))
        local st = package.after_first("://").after_first('/')
        local provider = st.before_first( '/' )
        local app_name = File.filename( st ).before_last('.')
        trace provider, app_name
      else
        local st = package.after_first(':')
        local provider = st.before_first( '/' )
        local app_name = File.filename( st ).before_last('.')
        trace provider, app_name
      endIf

    method run_script( action:String, provider:String, app_name:String )
      local package_folder = HOME/"packages/$/$" (provider,app_name)
      local build_folder = "$/$/$-$" (HOME,"build",provider,app_name)

      if (not File.is_folder(build_folder))
        println "Creating " + build_folder
        File.delete( build_folder )
        File.create_folder( build_folder )
      endIf

      File.copy( package_folder/(app_name+".rogue"), build_folder, &verbose )

      local build = File.esc( build_folder )
      local script_args = @{ :action, :app_name, :package_folder, morlock_home:HOME }.to_json.to_escaped_ascii('"')

      try
        local cmd = "roguec $.rogue Source/Package.rogue --essential --api --compile --output=$/script" ...
            (package_folder/app_name,build)
        execute cmd
        execute 'cd $ && ./script "$"' (build,script_args)
      catch (err:Error)
        File.delete( build_folder )
        throw err
      endTry

    method resolve_package( name:String, &allow_local_script )->PackageInfo
      local info : PackageInfo

      if (name.contains("://"))
        info = PackageInfo( name )

      elseIf (File.exists(name))
        # Local script for install.
        local filepath = name
        contingent
          sufficient (not File.is_folder(filepath))

          filepath = "$/$.rogue" (name,File.filename(name))
          sufficient (File.exists(filepath))

          local listing = File.listing( name/"*.rogue", &omit_path )
          if (listing.count == 1)
            filepath = name/listing.first
            sufficient (true)
          endIf

          if (listing.is_empty)
            throw error( "No morlock .rogue scripts exist in folder $"(name) )
          else
            throw error( "Multiple morlock .rogue scripts exist in folder $"(name) )
          endIf

        satisfied
          if (not allow_local_script)
            throw error( "A local .rogue script can only be used with 'morlock install'." )
          endIf

          if (filepath.contains('/'))
            local provider = File.filename( File.folder(filepath) )
            local app_name = File.filename( filepath ).before_last('.')
            info = PackageInfo( provider/app_name )
          else
            local app_name = filepath.before_last('.')
            info = PackageInfo( app_name/app_name )
          endIf
          info.using_local_script = true

          # Copy script into place
          File.create_folder( info.folder )
          File.copy( filepath, info.filepath, &if_different, &verbose )
        endContingent

      else
        # TODO: map 'name' to any "built-in" packages.
        if (name.contains('/'))
          info = PackageInfo( name )
        else
          local listing = File.listing( HOME/"packages/*/$"(name), &folders )
          which (listing.count)
            case 0
              info = PackageInfo( name )
            case 1
              local provider = File.filename(File.folder(listing.first))
              info = PackageInfo( provider/name )
            others
              use builder = StringBuilder.pool
                builder.println "Ambiguous app name '$' matches mulitple installed packages:"(name)
                builder.println "  $/$"(File.filename(File.folder(forEach in listing)),name)
                throw error( builder )
              endUse
          endWhich
        endIf

      endIf

      return info

      #{

      # Add github url if package does not already include a protocol (like HTTPS) or SSH portion.
      local host : String
      if (name.contains_pattern("@*:"))
        # git@github.com:name/...
        host = name.before_first(':') + ":"
        name .= rightmost( -host.count )

      elseIf (name.contains("://"))
        # https://github.com/name/...
        local protocol = name.before_first("://") + "://"
        name .= rightmost( -protocol.count )
        local _host = name.before_first('/') + '/'
        name .= after_first('/')
        host = protocol + _host

      else
        host = "https://github.com/"

      endIf

      # app
      # user/app
      # user/repo/.../app
      which (name.count('/'))
        case 0
          # 'name' -> 'name/name.git/name' (user/repo/app)
          host += "$/$.git" (name,name)

        case 1
          # 'user/name' -> 'user/name.git/name' (user/repo/app)
          local user = name.before_first('/')
          name .= after_first('/')
          host += "$/$.git" (user,name)

        others
          # user/repo/.../app -> user/repo.git/.../app
          local parts = name.split('/')
          parts[1] = parts[1].with_trailing(".git")
          host += parts.remove_first  # user
          host += '/'
          host += parts.remove_first  # repo.git
          name = parts.join('/')
      endWhich

      return Package( host, name )

      }#

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--help", &aliases=["-h","-?"] )
      ].parse( args )

      if (command//args.count)
        command//action = command//args.remove_at(0)
        local argc = command//args.count
        which (command//action)
          case "install", "uninstall"
            if (argc != 1)
              throw error( "'morlock $' requires a single package name as argument."(command//action) )
            endIf
          case "shellenv"
            if (argc)
              throw error( "'morlock $' does not accept arguments."(command//action) )
            endIf
        endWhich
      endIf

      return command

    method print_usage
      println @|USAGE
               |  morlock COMMAND
               |
               |PRIMARY COMMANDS
               |  help, --help, -h, -?
               |    Show this help text.
               |
               |  install provider/app_name
               |
               |  uninstall provider/app_name
               |
               |SECONDARY COMMANDS
               |  shellenv
               |    Prints out the shell commands that should be executed by your shell configuration.
               |    For example, in ~/.zprofile: eval "$(/opt/morlock/bin/morlock shellenv)"
               |
endClass

class PackageInfo
  PROPERTIES
    name     : String  # abepralle/rogue
    provider : String  # abepralle
    app_name : String  # rogue
    version  : String  # null, 1.0, 1.0.0, etc.
    host     : String  # github.com
    folder   : String  # /opt/morlock/packages/abepralle/rogue
    filepath : String  # /opt/morlock/packages/abepralle/rogue/rogue.rogue
    url      : String  # https://raw.githubusercontent.com/abepralle/rogue/master/Build.rogue
    using_local_script : Logical  # prevents pinging repo for updates

  METHODS
    method init( url )
      if (url.contains('@'))
        version = url.after_last('@')
        url .= before_last('@')
      endIf

      if (url.contains("://"))
        local parts = url.extract_strings( "$://$/$" )
        if (not parts or not url.ends_with(".rogue",&ignore_case))
          local sample = "https://raw.githubusercontent.com/account/repo/main/morlock/account/app_name.rogue"
          throw Error( ''Invalid URL "$" - expected e.g. "$".'' (url,sample) )
        endIf

        # protocol = parts[0]
        host       = parts[1]
        local path = parts[2]

        app_name = File.filename(path).before_last('.')
        if (path.contains('/'))
          provider = path.before_first('/')
        else
          provider = app_name
        endIf

      else
        which (url.count('/'))
          case 0
            provider = url
            app_name = url
            url = null
          case 1
            provider = url.before_first('/')
            app_name = url.after_first('/')
            url = null
          case 2
            # Assume a shorthand URL
            # - host/account/repo
            # - host/provider/app-name
            # - github.com/abepralle/rogue
            local parts = url.split('/')
            host     = parts[0]
            provider = parts[1]
            app_name = parts[2]
            url  = null
          others
            # Assume a URL that's missing the https:// protocol
            init( "https://"+url )
            return
        endWhich

      endIf

      name = provider/app_name
      folder = "$/packages/$/$" (Morlock.HOME,provider,app_name)
      filepath = "$/$.rogue" (folder,app_name)

      if (not url)
        local url_filepath = folder/"url.txt"
        if (File.exists(url_filepath))
          url = String(File(url_filepath)).trimmed
        endIf
      endIf

      if (host)
        which (host)
          case "github": host = "github.com"
        endWhich
      else
        if (url) host = url.after_any("://").before_first('/')
        else     host = "github.com"
      endIf

    method fetch_latest_script
      if (not url and not using_local_script)
        which (host)
          case "github.com"
            # Use the GitHub API to determine the default branch for the repo
            println "Using GitHub API to determine default branch of '$/$'."(provider,app_name)
            local cmd = ''curl -H "Accept: application/vnd.github.v3+json" ''
            cmd += "https://api.github.com/repos/$/$"(provider,app_name)
            println cmd
            local result = Process.run( cmd, &env )
            if (not result.success)
              throw Error( "Unable to determine default branch of 'github.com/$/$'."(provider,app_name) )
            endIf
            local data = JSON.parse( result->String )
            if (not data//id and data//message)
              throw Error( "Repo does not exist: github.com/$/$"(provider,app_name) )
            endIf

            local branch = data//default_branch->String
            if (not String.exists(branch)) branch = "main"

            url = "https://raw.githubusercontent.com/$/$/$/morlock/$/$.rogue"(provider,app_name,branch,provider,app_name)
            trace url
            trace "TODO"
          others
            throw Error( "Morlock does not know how to construct $ URLs."(host) )
        endWhich
      endIf


    method description->String
      use builder = StringBuilder.pool
        builder.println "name:"+name
        builder.println "host:"+host
        builder.println "provider:"+provider
        builder.println "app_name:"+app_name
        builder.println "version:"+version
        builder.println "url:"+url
        builder.println "folder:"+folder
        builder.println "filepath:"+filepath
        builder.println "using_local_script:"+using_local_script
        return builder->String
      endUse

endClass
