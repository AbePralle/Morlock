#================================================================================
# Morlock.rogue
# August 15, 2021
#================================================================================

$requireRogue "1.8.8"

$include "Bootstrap.rogue"
$include "Package.rogue"
$include "PackageInfo.rogue"

uses Utility/CommandLineParser

try
  Morlock.init( System.command_line_arguments )
catch (error:Error)
  local mesg = error->String
  Console.error.println mesg
  System.exit 1
endTry

class Morlock [singleton]
  PROPERTIES
    HOME : String

  METHODS
    method init( args:String[] )
      local cmd = parse_args( args )

      Bootstrap.configure( cmd )

      if (not cmd//action or cmd//action=="help")
        print_usage
        System.exit 0
      endIf

      which (cmd//action)
        case "bootstrap"
          noAction # already handled

        case "create"
          local info = resolve_package( cmd//args.first )
          local script_folder : String
          local listing = File.listing("./?orlock",&folders)
          forEach (folder in listing)
            if (folder.equals("morlock",&ignore_case))
              script_folder = folder
              escapeForEach
            endIf
          endForEach

          if (not script_folder)
            local n_caps = 0
            local n_lc = 0
            forEach (folder in File.listing(".",&folders,&ignore_hidden))
              if (folder[0].is_uppercase)     ++n_caps
              elseIf (folder[0].is_lowercase) ++n_lc
            endForEach
            script_folder = which{ (n_caps>=n_lc):"Morlock" || "morlock" }
            println "Creating $/ for install scripts..."(script_folder)
            create_folder( script_folder )
          endIf

          local script_filepath = "$/$.rogue" (script_folder,info.app_name)
          if (File.exists(script_filepath))
            throw error( "Install script '$' already exists."(script_filepath) )
          endIf

          local src =
          @|class $(CLASS_NAME)Package : Package
           |  # Base class Package is defined here:
           |  # https://github.com/AbePralle/Morlock/blob/main/Source/Package.rogue
           |  PROPERTIES
           |    name = "$(PACKAGE_NAME)"
           |
           |  METHODS
           |    method init
           |      # Uncomment to automatically determine releases using GitHub's API.
           |      # scan_repo_releases
           |
           |      # OR explicitly specify one or more release()s:
           |      # release "https://raw.githubusercontent.com/.../xyz-1.0.tar.gz"
           |      # release ...
           |
           |    #method build
           |      # Called by install(). Override as needed. The default implementation
           |      # knows how to build a Rogo-based project but nothing else.
           |      # Typically the only subfolder in the current folder will be the
           |      # unpacked archive.
           |      #   forEach (folder in File.listing(".",&folders,&ignore_hidden))
           |      #     if (File.exists(folder/"build-file-name"))
           |      #       archive_folder = folder  # be sure to set this property
           |      #       execute "cd $ && <build-command>" (File.esc(folder))
           |      #     endIf
           |      #   endForEach
           |
           |    method install
           |      # By the time install() is called the following properties are set:
           |      #   version           # "1.0"
           |      #   url               # "https://github.com/.../abc.tar.gz"
           |      #   archive_filename  # "abc.tar.gz"
           |      #
           |      # The current working directory is a temporary build folder.
           |
           |      download
           |      # Typically no need to customize
           |
           |      unpack
           |      # Knows how to unpack .tar.gz (Unix-like only) and .zip (Unix+Windows)
           |
           |      build
           |      # Builds the unpacked archive. See build() above.
           |
           |      install_executable( "**/exe-filename" )
           |      # Copies the file matching the given pattern to bin_folder/"app-name"
           |
           |      # If you have additional support files to install, copy them to
           |      # 'install_folder'.
           |endClass
          src .= replacing( "$(CLASS_NAME)",   info.app_name.capitalized.replacing('-','_') )
          src .= replacing( "$(PACKAGE_NAME)", info.name )

          println "Creating script template - edit to add appropriate build steps and commit:"
          println "$"(script_filepath)
          File.save( script_filepath, src )

        case "install"
          if (cmd//args.is_empty) throw error( "Package name expected after 'morlock install'." )
          local info = resolve_package( cmd//args.first, &allow_local_script )
          if (info.version and info.installed_versions.contains(info.version))
            throw error( "$ version $ is already installed."(info.name,info.version) )
          endIf
          info.fetch_latest_script
          run_script( "install", info )

        case "list"
          println (forEach in installed_packages)

        case "uninstall"
          if (cmd//args.is_empty) throw error( "Package name expected after 'morlock uninstall'." )
          local info = resolve_package( cmd//args.first )
          if (info.version and not info.installed_versions.contains(info.version))
            throw error( "$ version $ is not installed."(info.name,info.version) )
          endIf
          if (not File.exists(info.folder))
            throw error( "$ is not installed."(info.name) )
          endIf
          run_script( "uninstall", info )

        case "update"
          args = cmd//args.to_list<<String>>
          if (args.is_empty) args = installed_packages
          forEach (package in args)
            try
              local info = resolve_package( package )
              info.fetch_latest_script
              run_script( "update", info )
            catch (err:Error)
              local w = Console.width.or_smaller(80)
              println "="*w
              println "ERROR [$]" (package)
              println err->String.indented(2)
              println "="*w
            endTry
          endForEach

        others
          if (cmd//args.is_empty)
            throw error( "Missing package name after 'morlock $'."(cmd//action) )
          endIf
          local info = resolve_package( cmd//args.first )
          run_script( cmd//action, info )
      endWhich

    method create_build_folder( info:PackageInfo )->String
      local build_folder = "$/$/$/$" (HOME,"build",info.provider,info.app_name)
      if (not File.is_folder(build_folder))
        println "Creating " + build_folder
        File.delete( build_folder )
        File.create_folder( build_folder )
      endIf
      return build_folder

    method create_folder( path:String, &chown )
      if (not File.is_folder(path))
        if (not File.create_folder(path))
          local error_message = "Unable to create folder: "+path
          if (System.is_windows) throw Error(error_message)
          local cmd = "sudo mkdir -p $" (File.esc(path))
          execute( cmd, error_message )
        endIf

        if (not System.is_windows)
          if (chown)
            # chown the Morlock home folder
            if (System.is_macos)
              local cmd = "chown $:admin $" (System.environment//USER,File.esc(Morlock.HOME))
              if (not Process.run(cmd,&env).success)
                execute( "sudo " + cmd, "Unable to chown Morlock home folder: "+Morlock.HOME )
              endIf
            endIf
          endIf

          execute( "chmod 755 $"(File.esc(path)), &bg )
        endIf
      endIf

    method error( message:String )->Error
      return Error( message )

    method header
      println "-" * Console.width.or_smaller(80)

    method header( message:String )
      header
      println message
      header

    method installed_packages->String[]
      local packages = Set<<String>>()
      local versions = File.listing( HOME/"packages/*/*/*", &folders, &omit_path )
      forEach (v in versions)
        packages.add( File.folder(v) )
      endForEach
      return packages->String[]

    method run_script( action:String, info:PackageInfo )
      if (action != "install" and not File.exists(info.folder))
        throw error( "Package $ is not installed." (info.name) )
      endIf

      local build_folder : String
      if (action == "install" or action == "update")
        build_folder = create_build_folder(info)
      endIf

      local script_args = info.package_args
      script_args//action = action

      try
        block script_args = script_args.to_json.to_escaped_ascii('"')
          local v_list = File.listing( HOME/"packages/abepralle/morlock", &folders, &ignore_hidden, &omit_path )
          if (v_list.is_empty)
            println "[INTERNAL ERROR] Morlock has no current version."
            System.exit 1
          endIf
          v_list.sort( (a,b) => VersionNumber(a) > b )
          local v = v_list.first
          local launcher_filepath = HOME/"packages/abepralle/morlock/$/Source/ScriptLauncher.rogue"(v)
          local package_filepath  = HOME/"packages/abepralle/morlock/$/Source/Package.rogue"(v)

          local exe_filename = info.app_name
          if (System.is_windows) exe_filename += ".exe"
          local exe_filepath = info.folder/exe_filename

          local crc32_filepath = info.folder/"source_crc32.txt"
          local crc32 : Int32
          contingent
            # Recompile?
            crc32 = File.crc32(info.filepath) ~ File.crc32(package_filepath) ~ File.crc32(launcher_filepath)
            necessary (File.exists(exe_filepath))
            necessary (File.exists(crc32_filepath))
            necessary (crc32->String == String(File(crc32_filepath)).trimmed)

          unsatisfied
            build_folder = create_build_folder(info)
            local cmd = "roguec $ $ $ --essential --api --compile --output=$" ...
              (File.esc(info.filepath), File.esc(launcher_filepath), ...
               File.esc(package_filepath), File.esc(build_folder/info.app_name))
            execute cmd
            File.delete( exe_filepath )
            File.copy( build_folder/exe_filename, exe_filepath, &verbose )
            if (not System.is_windows) execute( "chmod u+x $" (File.esc(exe_filepath)), &bg )
            File.save( crc32_filepath, crc32->String )

          endContingent

          if (action == "install" or action == "update")
            execute( 'cd $ && $ "$"' (File.esc(build_folder),File.esc(exe_filepath),script_args), &bg )
          else
            execute( 'cd $ && $ "$"' (File.esc(info.folder),File.esc(exe_filepath),script_args), &bg )
          endIf
        endBlock
      catch (err:Error)
        if (build_folder) File.delete( build_folder )
        throw err
      endTry

    method resolve_package( name:String, &allow_local_script )->PackageInfo
      local info    : PackageInfo
      local version : String

      if (name.contains('@'))
        version = name.after_last('@')
        name .= before_last('@')
      endIf

      if (name.contains("://"))
        info = PackageInfo( HOME, name )

      elseIf (File.exists(name) and not File.is_folder(name))
        # Local script for install.
        local filepath = name

        if (not allow_local_script)
          throw error( "A local .rogue script can only be used with 'morlock install'." )
        endIf

        # Parse the package name out of the script
        local provider, app_name : String
        forEach (line in LineReader(File(filepath)))
          if (line.contains("name") and line.contains_pattern(''name*=*"*"'' ))
            local package_name = line.extract_string( ''*name*=*"$"*'' )
            if (not package_name) escapeForEach
            if (package_name.contains('/'))
              provider = File.filename( File.folder(package_name) )
              app_name = File.filename( package_name )
            else
              provider = package_name
              app_name = package_name
            endIf
            escapeForEach
          endIf
        endForEach

        if (not app_name)
          throw error( ''Failed to parse package name out of script ('name = "provider/app-name"').'' )
        endIf

        info = PackageInfo( HOME, provider/app_name )
        info.using_local_script = true

        # Copy script into place
        File.create_folder( info.folder )
        File.copy( filepath, info.filepath, &if_different, &verbose )

      else
        # TODO: map 'name' to any "built-in" packages.
        if (name.contains('/'))
          info = PackageInfo( HOME, name )
        else
          local listing = File.listing( HOME/"packages/*/$"(name), &folders )
          which (listing.count)
            case 0
              info = PackageInfo( HOME, name )
            case 1
              local provider = File.filename(File.folder(listing.first))
              info = PackageInfo( HOME, provider/name )
            others
              use builder = StringBuilder.pool
                builder.println "Ambiguous app name '$' matches mulitple installed packages:"(name)
                builder.println "  $/$"(File.filename(File.folder(forEach in listing)),name)
                throw error( builder )
              endUse
          endWhich
        endIf

      endIf

      info.version = version

      return info

    method parse_args( args:String[] )->Value
      if (System.is_windows)
        HOME = "%HOMEDRIVE%%HOMEPATH%/AppData/Local/Morlock"
      else
        HOME = "/opt/morlock"
      endIf

      local command = CommandLineParser().
      [
        option( "--home=",      &alias="-h", &default=HOME )
        option( "--installer=", &alias="-i" )
      ].parse( args )

      if (command//args.count)
        command//action = command//args.remove_first
      endIf

      HOME = File.expand_path( command//options//home )

      return command

    method print_usage
      println @|USAGE
               |  morlock <command>
               |
               |COMMANDS
               |  help
               |    Show this help text.
               |
               |  create <package>
               |    Execute in the root folder of a repo you want to add a Morlock install
               |    script to. If your GitHub username is "user" and you are in repo "abc",
               |    write "morlock create user/abc". If you want to have the app named "xyz"
               |    (but still from repo "abc"), write "morlock create user/xyz" and then
               |    users will install with "morlock install user/abc/xyz".
               |
               |  install <package>
               |    'morlock install user/repo/app-name' - installs package user/app-name
               |    'morlock install user/app-name'      - shorthand for user/app-name/app-name
               |
               |  uninstall <package>
               |
               |  update [package-a [package-b ...]]
               |    Updates listed packages or else all packages, including Morlock, Rogue,
               |    and Rogo.
               |
               |PACKAGE FORMAT
               |  provider/repo/app-name
               |  provider/repo
               |  repo
               |  https://github.com/provider/repo/morlock/app-name.rogue
endClass

routine execute( cmd:String, &suppress_error, &allow_sudo, &bg )->Logical
  if (not bg) println "> " + cmd
  if (0 == System.run(cmd)) return true

  if (allow_sudo)
    println "Error executing '$'; retrying with 'sudo'."(cmd)
    return execute( "sudo "+cmd, &=suppress_error )
  endIf

  if (suppress_error) return false
  throw Error( "Error executing:\n$"(cmd) )
endRoutine

