#================================================================================
# Morlock.rogue
# August 15, 2021
#================================================================================

$requireRogue "1.8.8"

uses Utility/CommandLineParser

try
  Morlock( System.command_line_arguments )
catch (error:Error)
  local w = Console.width.or_smaller( 80 )
  Console.error.println "="*w
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(w-2).indented(2)
  Console.error.println "="*w
  System.exit 1
endTry

class Morlock
  DEFINITIONS
    MORLOCK_HOME = "/opt/morlock"

  METHODS
    method init( args:String[] )
      local command = parse_args( args )
      # 'command' has //options and possibly //args

      if (command//options//help or not command//action or command//action == "help")
        print_usage
        System.exit 0
      endIf

      configure_morlock

      which (command//action)
        case "install"
          local package = resolve_package( command//args.first, &allow_local_script )
          install_using_local_script( package )
          #if (not install_using_local_script(package))
          trace package
          # TODO

        case "shellenv"
          local morlock_bin = MORLOCK_HOME/"bin"
          if (not System.environment//PATH.contains(morlock_bin))
            print   ''export PATH="$'' (morlock_bin)
            println ''${PATH+:$PATH}";''
          endIf

        case "uninstall"
          local package = resolve_package( command//args.first, &allow_local_script )
          run_script( "uninstall", package )

        others
          throw error( "Unrecognized morlock command '$'."(command//action) )
      endWhich

      #{
      local shellenv = MORLOCK_HOME/"shellenv"
      if (not File.exists(shellenv))
        File.save( shellenv, ''echo export PATH="$/bin${PATH+:$PATH}";''(MORLOCK_HOME,'$','$') )
        execute( "chmod u+x $" (shellenv) )
      endIf

      create_folder( MORLOCK_HOME/"packages/abepralle/hello-world" )
      local from_file = "Morlock/hello-world.rogue"
      local to_file   = MORLOCK_HOME/"packages/abepralle/hello-world/hello-world.rogue"
      if (File.is_different_than(from_file,to_file))
        println "> Copy $ -> $" (from_file,to_file)
        File.copy( from_file, to_file )
      endIf

      install( "abepralle", "hello-world" )
      }#

    method configure_morlock
      create_folder( MORLOCK_HOME, &chown )
      create_folder( MORLOCK_HOME/"bin" )
      create_folder( MORLOCK_HOME/"build" )
      create_folder( MORLOCK_HOME/"packages" )

    method create_folder( folder:String, &chown )
      if (not File.exists(folder))
        execute( "mkdir -p "+folder, &allow_sudo )

        if (chown)
          local user = System.environment//USER
          execute( "chown $ $" (user,folder), &allow_sudo )
        endIf
      endIf

    method error( message:String )->Error
      return Error( message )

    method execute( cmd:String, &suppress_error, &allow_sudo )->Logical
      println "> " + cmd
      if (0 == System.run(cmd)) return true

      if (allow_sudo)
        println "Error executing '$'; retrying with 'sudo'."(cmd)
        return execute( "sudo "+cmd, &=suppress_error )
      endIf

      if (suppress_error) return false
      throw Error( "Error executing '$'."(cmd) )

    method find_existing_package( name:String )->String
      if (not name.contains('@') and not name.contains("://"))
        contingent
          if (File.exists(name))
            if (File.is_folder(name))
              local filepath = "$/$.rogue" (name,File.filename(name))
              if (File.exists(filepath))
                name = filepath
              else
                local listing = File.listing( name/"*.rogue", &omit_path )
                if (listing.count == 1)
                  name /= listing.first
                elseIf (listing.is_empty)
                  throw error( "No .rogue scripts exist in folder $"(name) )
                else
                  throw error( "Multiple .rogue scripts exist in folder $"(name) )
                endIf
              endIf
            endIf
            sufficient (true)

          elseIf (File.exists(name+".rogue"))
            name += ".rogue"
            sufficient (true)

          else
            escapeContingent

          endIf

        satisfied
          # 'name' is the filepath of an existing file
          # Extract [provider]/[app_name].rogue
          local provider = File.filename( File.folder(name) )
          local app_name = File.filename(name).before_last(".rogue")

          # Create MORLOCK_HOME/packages/provider/app_name and copy the .rogue script there
          local package_folder = MORLOCK_HOME/"packages/$/$" (provider,app_name)
          if (not File.exists(package_folder))
            println "Creating " + package_folder
            File.create_folder( package_folder )
          endIf

          local filepath = "$/$.rogue" (package_folder,app_name)
          File.copy( name, filepath, &if_different, &verbose )
          return filepath

        endContingent

        # See if we already have it installed
        if (not name.contains('/'))
          local listing = File.listing( MORLOCK_HOME/"packages/*"/name )
          if (listing.count == 1)
            name = File.filename(File.parent(listing.first,1))/name
            return name
          elseIf (listing.count > 1)
          endIf
        endIf

        if (name.contains('/'))
          local filepath = MORLOCK_HOME/"packages/$/$.rogue" (name,File.filename(name))
          if (File.exists(filepath)) return filepath
        endIf

      endIf
      return "TODO"

    method header( message:String )
      println "-" * Console.width.or_smaller(80)
      println message
      println "-" * Console.width.or_smaller(80)

    method install_using_local_script( package:String )->Logical
      # Returns false if 'package' is not a local file.
      if (package.contains("://") or package.contains_pattern("@*:")) return false
      if (not File.exists(package)) return false

      local provider = File.filename(File.folder(package))
      local app_name = File.filename(package).before_last('.')
      local package_folder = MORLOCK_HOME/"packages/$/$" (provider,app_name)
      local script_filepath = "$/$.rogue" (package_folder,app_name)

      File.create_folder( package_folder )
      File.copy( package, script_filepath, &if_different, &verbose )
      install( provider, app_name )

      return true

    method install( provider:String, app_name:String )
      run_script( "install", provider, app_name )

    method run_script( action:String, package:String )
      if (package.contains("://"))
        local st = package.after_first("://").after_first('/')
        local provider = st.before_first( '/' )
        local app_name = File.filename( st ).before_last('.')
        trace provider, app_name
      else
        local st = package.after_first(':')
        local provider = st.before_first( '/' )
        local app_name = File.filename( st ).before_last('.')
        trace provider, app_name
      endIf

    method run_script( action:String, provider:String, app_name:String )
      local package_folder = MORLOCK_HOME/"packages/$/$" (provider,app_name)
      local build_folder = "$/$/$-$" (MORLOCK_HOME,"build",provider,app_name)

      if (not File.is_folder(build_folder))
        println "Creating " + build_folder
        File.delete( build_folder )
        File.create_folder( build_folder )
      endIf

      File.copy( package_folder/(app_name+".rogue"), build_folder, &verbose )

      local build = File.esc( build_folder )
      local script_args = @{ :action, :app_name, :package_folder, morlock_home:MORLOCK_HOME }.to_json.to_escaped_ascii('"')

      try
        local cmd = "roguec $.rogue Source/Package.rogue --essential --api --compile --output=$/script" ...
            (package_folder/app_name,build)
        execute cmd
        execute 'cd $ && ./script "$"' (build,script_args)
      catch (err:Error)
        File.delete( build_folder )
        throw err
      endTry

    method resolve_package( name:String, &allow_local_script )->String
      # Resolves the given package name into a URL

      if (name.contains_pattern("@*:"))
        # git@github.com:name/...
        local host = name.up_to_first(':')
        local package = name.rightmost( -host.count )

        if (package.contains('/'))
          # git@github.com:provider/.../app_name
          return name
        else
          # git@github.com:name -> git@github.com:name/name (git@github.com:provider/app_name)
            return "$$/$" (host,package,package)
        endIf

      elseIf (name.contains("://"))
        # https://github.com/name/...
        local parts = name.extract_strings( "$://$/$" )
        if (not parts) throw error( "Missing package name after URL "+name )
        local host = "$://$" (parts[0],parts[1])
        local package = parts[2]
        if (package.contains('/'))
          # https://github.com/provider/.../app_name
          return name
        else
          # https://github.com/name -> https://github.com/name/name (https://github.com/provider/app_name)
          return "$$/$" (host,package,package)
        endIf

      elseIf (File.exists(name))
        # Local install. Return the full path to the install script.
        local filepath = name
        contingent
          sufficient (not File.is_folder(filepath))

          filepath = "$/$.rogue" (name,File.filename(name))
          sufficient (File.exists(filepath))

          local listing = File.listing( name/"*.rogue", &omit_path )
          if (listing.count == 1)
            filepath = name/listing.first
            sufficient (true)
          endIf

          if (listing.is_empty)
            throw error( "No morlock .rogue scripts exist in folder $"(name) )
          else
            throw error( "Multiple morlock .rogue scripts exist in folder $"(name) )
          endIf

        satisfied
          if (allow_local_script) return filepath
          throw error( "A local .rogue script can only be used with 'morlock install'." )

        endContingent

      else
        # Look for existing modules with the given name and get the origin from them if possible
        local app_name = File.filename(name)

        local provider : String
        if (name.contains('/'))
          provider = name.before_first('/')  # same as app_name if no '/'
          local filepath = MORLOCK_HOME/"packages/$/$/origin.txt" (provider,app_name)
          if (File.exists(filepath)) return String(File(filepath)).trimmed
        else
          local listing = File.listing( MORLOCK_HOME/"packages/*/$"(app_name), &folders )
          which (listing.count)
            case 0
              provider = app_name
            case 1
              provider = File.filename(File.folder(listing.first))
            others
              use builder = StringBuilder.pool
                builder.println "Ambiguous app name '$' matches mulitple installed packages:"(app_name)
                builder.println "  $/$"(File.filename(File.folder(forEach in listing)),app_name)
                throw error( builder )
              endUse
          endWhich
        endIf

        local filepath = MORLOCK_HOME/"packages/$/$/origin.txt" (provider,app_name)
        if (File.exists(filepath)) return String(File(filepath)).trimmed

        # Otherwise assume github and transform name into github URL
        return "https://github.com/$/$" (provider,app_name)

      endIf

      #{

      # Add github url if package does not already include a protocol (like HTTPS) or SSH portion.
      local host : String
      if (name.contains_pattern("@*:"))
        # git@github.com:name/...
        host = name.before_first(':') + ":"
        name .= rightmost( -host.count )

      elseIf (name.contains("://"))
        # https://github.com/name/...
        local protocol = name.before_first("://") + "://"
        name .= rightmost( -protocol.count )
        local _host = name.before_first('/') + '/'
        name .= after_first('/')
        host = protocol + _host

      else
        host = "https://github.com/"

      endIf

      # app
      # user/app
      # user/repo/.../app
      which (name.count('/'))
        case 0
          # 'name' -> 'name/name.git/name' (user/repo/app)
          host += "$/$.git" (name,name)

        case 1
          # 'user/name' -> 'user/name.git/name' (user/repo/app)
          local user = name.before_first('/')
          name .= after_first('/')
          host += "$/$.git" (user,name)

        others
          # user/repo/.../app -> user/repo.git/.../app
          local parts = name.split('/')
          parts[1] = parts[1].with_trailing(".git")
          host += parts.remove_first  # user
          host += '/'
          host += parts.remove_first  # repo.git
          name = parts.join('/')
      endWhich

      return Package( host, name )

      }#

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--help", &aliases=["-h","-?"] )
      ].parse( args )

      if (command//args.count)
        command//action = command//args.remove_at(0)
        local argc = command//args.count
        which (command//action)
          case "install", "uninstall"
            if (argc != 1)
              throw error( "'morlock $' requires a single package name as argument."(command//action) )
            endIf
          case "shellenv"
            if (argc)
              throw error( "'morlock $' does not accept arguments."(command//action) )
            endIf
        endWhich
      endIf

      return command

    method print_usage
      println @|USAGE
               |  morlock <COMMAND>
               |
               |PRIMARY COMMANDS
               |  help, --help, -h, -?
               |    Show this help text.
               |
               |  install <provider>/<app_name>
               |
               |  uninstall <provider>/<app_name>
               |
               |SECONDARY COMMANDS
               |  shellenv
               |    Prints out the shell commands that should be executed by your shell configuration.
               |    For example, in ~/.zprofile: eval "$(/opt/morlock/bin/morlock shellenv)"
               |
endClass
