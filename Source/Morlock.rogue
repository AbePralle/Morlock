#================================================================================
# Morlock.rogue
# August 15, 2021
#================================================================================

$requireRogue "1.8.8"

$include "Bootstrap.rogue"
$include "Package.rogue"
$include "PackageInfo.rogue"

try
  Morlock.init( System.command_line_arguments )
catch (error:Error)
  local mesg = error->String
  local w = mesg.longest_line.or_larger(80).or_smaller( Console.width )
  Console.error.println mesg
  System.exit 1
endTry

class Morlock [singleton]
  PROPERTIES
    HOME : String

  METHODS
    method init( args:String[] )
      args = parse_args( args )

      Bootstrap.configure( &bootstrapping=(args.count and args.first=="bootstrap") )

      if (args.is_empty or args.first=="help")
        print_usage
        System.exit 0
      endIf

      which (args[0])
        case "install"
          local info = resolve_package( args[1], &allow_local_script )
          if (info.version and info.installed_versions.contains(info.version))
            throw error( "$ version $ is already installed."(info.name,info.version) )
          endIf
          info.fetch_latest_script
          run_script( "install", info )

        case "uninstall"
          local info = resolve_package( args[1] )
          if (info.version and not info.installed_versions.contains(info.version))
            throw error( "$ version $ is not installed."(info.name,info.version) )
          endIf
          if (not File.exists(info.folder))
            throw error( "$ is not installed."(info.name) )
          endIf
          run_script( "uninstall", info )

        others
          throw error( "Unrecognized morlock command '$'."(args[0]) )
      endWhich

    method create_build_folder( info:PackageInfo )->String
      local build_folder = "$/$/$/$" (HOME,"build",info.provider,info.app_name)
      if (not File.is_folder(build_folder))
        println "Creating " + build_folder
        File.delete( build_folder )
        File.create_folder( build_folder )
      endIf
      return build_folder

    method create_folder( path:String, &chown )
      if (not File.is_folder(path))
        if (not File.create_folder(path))
          local error_message = "Unable to create folder: "+path
          if (System.is_windows) throw Error(error_message)
          local cmd = "sudo mkdir -p $" (File.esc(path))
          execute( cmd, error_message )
        endIf

        if (not System.is_windows)
          if (chown)
            # chown the Morlock home folder
            if (System.is_macos)
              local cmd = "chown $:admin $" (System.environment//USER,File.esc(Morlock.HOME))
              if (not Process.run(cmd,&env).success)
                execute( "sudo " + cmd, "Unable to chown Morlock home folder: "+Morlock.HOME )
              endIf
            endIf
          endIf

          execute( "chmod 755 $"(File.esc(path)), &bg )
        endIf
      endIf

    method error( message:String )->Error
      return Error( message )

    method header
      println "-" * Console.width.or_smaller(80)

    method header( message:String )
      header
      println message
      header

    method run_script( action:String, info:PackageInfo )
      local build_folder : String
      if (action == "install")
        build_folder = create_build_folder(info)
      endIf

      local script_args = info.package_args
      script_args//action = action

      try
        block script_args = script_args.to_json.to_escaped_ascii('"')
          local launcher_filepath = "/opt/morlock/packages/morlock/Source/ScriptLauncher.rogue"
          local package_filepath = "/opt/morlock/packages/morlock/Source/Package.rogue"
          local exe_filepath = info.folder/info.app_name
          local crc32_filepath = info.folder/"source_crc32.txt"
          local crc32 : Int32
          contingent
            # Recompile?
            crc32 = File.crc32(info.filepath) ~ File.crc32(package_filepath) ~ File.crc32(launcher_filepath)
            necessary (File.exists(exe_filepath))
            necessary (File.exists(crc32_filepath))
            necessary (crc32->String == String(File(crc32_filepath)).trimmed)

          unsatisfied
            build_folder = create_build_folder(info)
            local cmd = "roguec $ $ $ --essential --api --compile --output=$/$" ...
              (info.filepath, launcher_filepath, package_filepath, File.esc(build_folder), info.app_name)
            execute cmd
            File.delete( exe_filepath )
            File.copy( build_folder/info.app_name, exe_filepath, &verbose )
            if (not System.is_windows) execute( "chmod u+x $" (File.esc(exe_filepath)), &bg )
            File.save( crc32_filepath, crc32->String )

          endContingent

          if (action == "install")
            execute( 'cd $ && $ "$"' (File.esc(build_folder),File.esc(exe_filepath),script_args), &bg )
          else
            execute( 'cd $ && $ "$"' (File.esc(info.folder),File.esc(exe_filepath),script_args), &bg )
          endIf
        endBlock
      catch (err:Error)
        if (build_folder) File.delete( build_folder )
        System.exit 1
      endTry

    method resolve_package( name:String, &allow_local_script )->PackageInfo
      local info    : PackageInfo
      local version : String

      if (name.contains('@'))
        version = name.after_last('@')
        name .= before_last('@')
      endIf

      if (name.contains("://"))
        info = PackageInfo( HOME, name )

      elseIf (File.exists(name) and not File.is_folder(name))
        # Local script for install.
        local filepath = name

        if (not allow_local_script)
          throw error( "A local .rogue script can only be used with 'morlock install'." )
        endIf

        # Parse the package name out of the script
        local provider, app_name : String
        forEach (line in LineReader(File(filepath)))
          if (line.contains("name") and line.contains_pattern(''name*=*"*"'' ))
            local package_name = line.extract_string( ''*name*=*"$"*'' )
            if (not package_name) escapeForEach
            if (package_name.contains('/'))
              provider = File.filename( File.folder(package_name) )
              app_name = File.filename( package_name )
            else
              provider = package_name
              app_name = package_name
            endIf
            escapeForEach
          endIf
        endForEach

        if (not app_name)
          throw error( ''Failed to parse package name out of script ('name = "provider/app-name"').'' )
        endIf

        info = PackageInfo( HOME, provider/app_name )
        info.using_local_script = true

        # Copy script into place
        File.create_folder( info.folder )
        File.copy( filepath, info.filepath, &if_different, &verbose )

      else
        # TODO: map 'name' to any "built-in" packages.

        if (name.contains('/'))
          info = PackageInfo( HOME, name )
        else
          local listing = File.listing( HOME/"packages/*/$"(name), &folders )
          which (listing.count)
            case 0
              info = PackageInfo( HOME, name )
            case 1
              local provider = File.filename(File.folder(listing.first))
              info = PackageInfo( HOME, provider/name )
            others
              use builder = StringBuilder.pool
                builder.println "Ambiguous app name '$' matches mulitple installed packages:"(name)
                builder.println "  $/$"(File.filename(File.folder(forEach in listing)),name)
                throw error( builder )
              endUse
          endWhich
        endIf

      endIf

      info.version = version

      return info

    method parse_args( args:String[] )->String[]
      if (System.is_windows)
        HOME = "%HOMEDRIVE%%HOMEPATH%/AppData/Local/Morlock"
      else
        HOME = "/opt/morlock"
      endIf

      args .= cloned
      if (args.count)
        which (args.first)
          case "bootstrap"
            if (args.count >= 2)
              HOME = args[1]
            endIf

          case "install", "reinstall"
            if (args.count != 2)
              throw error( "'morlock $' requires a single package name as argument."(args.first) )
            endIf
        endWhich
      endIf

      HOME = File.expand_path( HOME )

      return args

    method print_usage
      println @|USAGE
               |  morlock <command>
               |
               |COMMANDS
               |  help
               |    Show this help text.
               |
               |  install   <package>
               |
               |  uninstall <package>
               |
               |PACKAGE FORMAT
               |  provider/repo/app-name
               |  provider/repo
               |  repo
               |  https://github.com/provider/repo/morlock/app-name.rogue
endClass

routine execute( cmd:String, &suppress_error, &allow_sudo, &bg )->Logical
  if (not bg) println "> " + cmd
  if (0 == System.run(cmd)) return true

  if (allow_sudo)
    println "Error executing '$'; retrying with 'sudo'."(cmd)
    return execute( "sudo "+cmd, &=suppress_error )
  endIf

  if (suppress_error) return false
  throw Error( "Error executing:\n$"(cmd) )
endRoutine

