uses Utility/Best
uses Utility/Zip

class Package
  PROPERTIES
    action            : String
    name              : String
    host              : String
    provider          : String
    repo              : String
    app_name          : String
    specified_version : String
    version           : String
    url               : String
    morlock_home      : String
    launcher_folder   : String
    package_folder    : String
    install_folder    : String
    bin_folder        : String
    archive_filename  : String
    archive_folder    : String
    is_unpacked       : String

    releases          = @[]
    properties        : Value
    cache             : Value

  METHODS
    method init
      # Can override this to add specific release()s. For example:
      #   release "https://raw.githubusercontent.com/.../xyz-1.0.tar.gz"
      scan_repo_releases

    method init( args:String[] )
      require args.count
      init( JSON.parse(args.first) )

    method init( name, properties:Value )
      init( properties )

    method init( properties )
      if (not name or name.count('/')>1)
        throw PackageError(
          File.filename(properties//script_filepath),
          ''Package name must be specified as a property. For example:\n\n  PROPERTIES\n    name = "provider/$"''...
          (File.filename(properties//script_filepath).before_last('.'))
        )
      endIf

      if (not name.contains('/')) name = name/name

      provider = name.before_first('/')
      app_name = name.after_first('/')

      action = properties//action
      morlock_home = properties//morlock_home
      host = properties//host
      repo = properties//repo
      launcher_folder = morlock_home/"bin"
      package_folder = "$/packages/$/$" (morlock_home,provider,app_name)

      if (package_folder/"cache.json")
        cache = JSON.parse(File(package_folder/"cache.json"))
      else
        cache = @{}
      endIf

      if (properties//version)
        specified_version = properties//version
        version = specified_version
      endIf

      init

    method build
      # Attempts to automatically figure out how build the downloaded & unpacked
      # archive and launches the appropriate commands.
      forEach (folder in File.listing(".",&folders,&ignore_hidden))
        if (File.exists(folder/"Build.rogue"))
          execute "cd $ && rogo build" (File.esc(folder))
          archive_folder = folder
          return
        endIf
      endForEach

      if (not is_unpacked)
        # Most likely the script just didn't call unpack() yet.
        unpack
        is_unpacked = true
        build
      else
        throw error( "Unable to determine how to build $ after unpacking it."(url) )
      endIf

    method copy_executable( src_filepath:String, dest_filename=null:String )
      if (not dest_filename)
        dest_filename = app_name
        if (System.is_windows) dest_filename += ".exe"
      endIf

      create_folder( bin_folder )
      local dest_filepath = bin_folder/dest_filename

      println "Copying $ -> $" (src_filepath,dest_filepath)
      File.delete( dest_filepath )
      File.copy( src_filepath, dest_filepath )
      if (not System.is_windows) execute( "chmod u+x $" (File.esc(dest_filepath)), &bg )

    method create_folder( folder:String )
      println "  " + folder
      File.create_folder( folder )
      if (not File.is_folder(folder))
        throw error( ''Error creating folder "$".''(folder) )
      endIf

    method download->String
      println "Downloading $ v$" (name,version)
      execute( "curl -LfsS $ -o $" (url,File.esc(archive_filename)), &bg )
      if (not File.exists(archive_filename)) throw error( "Error downloading " + url )
      return archive_filename

    method error( message:String )->Error
      return PackageError( provider/app_name, message )

    method execute( cmd:String, &bg )
      if (not bg )println "> " + cmd
      if (0 != System.run(cmd))
        throw error( "Error executing:\n"+cmd )
      endIf

    method filename_for_url( url:String )->String
      local filename = File.filename(url)
      contingent
        local ext = File.extension(filename)
        sufficient (ext.equals("zip",&ignore_case))
        sufficient (ext.equals("tar",&ignore_case))
        sufficient (ext.equals("gz",&ignore_case))
        if (url.contains("tarball"))     filename += ".tar.gz"
        elseIf (url.contains("zipball")) filename += ".zip"
        else                             throw Error( "Unrecognized archive format: " + filename )
      endContingent
      return filename

    method handle_action
      which (action)
        case "install", "update"
          handle_install
        case "uninstall"
          if (File.exists(install_folder))
            header "Uninstalling $ version $"(name,version)
            File.delete( install_folder )
          elseIf (specified_version)
            throw error( "$ version $ is not installed." (name,version) )
          else
            throw error( "$ is not installed." (name) )
          endIf
        others
          println ''WARNING: morlock script $.rogue does not support action "$".''(app_name,action)
      endWhich

    method header( message:String )
      println "-" * Console.width.or_smaller(80)
      println message
      println "-" * Console.width.or_smaller(80)

    method handle_install
      if (File.exists(install_folder) and File.listing(install_folder).count > 0)
        if (action == "update") System.exit(0)
        throw error( "$ version $ is already installed."(name,version) )
      endIf

      try
        println "-" * Console.width.or_smaller(80)
        println "Installing $ v$" (app_name,version)
        println "-" * Console.width.or_smaller(80)
        println "Creating install folder"
        create_folder( install_folder )
        create_folder( bin_folder )
        install
        File.save( File.folder(install_folder)/"active_version.txt", version )

      catch (err:Error)
        File.delete( install_folder )
        throw err
      endTry

    method install
      # Override as needed.
      download
      unpack
      build
      install_executable

    method install_executable( default=null:String, windows=null:String, macos=null:String, linux=null:String,
        dest_filename=null:String, &link=true )
      local pattern : String
      if (System.is_macos)       pattern = which{ macos || default }
      elseIf (System.is_linux)   pattern = which{ linux || default }
      elseIf (System.is_windows) pattern = which{ windows || default }
      else                       pattern = default

      if (not pattern)
        if (File.is_folder(archive_folder/"Build"))   pattern = "Build/*"
        elseIf (File.is_folder(archive_folder/"bin")) pattern = "bin/*"
      endIf

      if (not pattern) throw error( "No filepath or pattern given for $."(System.os) )

      pattern = pattern.replacing( "$(OS)", System.os )

      local exe_list = File.listing( archive_folder/pattern )
      contingent
        sufficient (exe_list.count == 1)
        if (System.is_windows)
          exe_list.keep( (f)=>f.ends_with(".exe",&ignore_case) )
        else
          if (exe_list.find( (f)=>f.ends_with(System.os,&ignore_case) ))
            exe_list.keep( (f)=>f.ends_with(System.os,&ignore_case) )
          elseIf
            exe_list.find( (f) with (app_name) => File.filename(f) == app_name )
            exe_list.keep( (f) with (app_name) => File.filename(f) == app_name )
          endIf
        endIf
        sufficient (exe_list.count == 1)

        throw error( "Cannot locate executable build product." )
      endContingent

      copy_executable( forEach in exe_list, dest_filename )
      if (link) this.link

    method link
      local exe_list = File.listing( bin_folder/"*" )
      forEach (exe in exe_list)
        local launcher = launcher_folder/(File.filename(exe).before_last(".exe",&ignore_case))
        if (System.is_windows) launcher += ".bat"
        File.delete( launcher )
        if (System.is_windows)
          File.save( launcher, ''@$ %*''(File.esc(File.conventional_filepath(exe))) )
        else
          local cmd = "ln -s $ $" (exe,launcher)
          execute( cmd, &bg )
        endIf
      endForEach

    method release( url:String, platforms=null:Platforms, version=null:String )
      # Registers a release with .tar.gz/.zip URL and version number.
      #
      # platforms
      #   Any combination of characters w, m, l (windows, mac, linux)
      #   If unspecified then .tar.gz implies "ml" and any other extension
      #   implies "wml". Mac and Linux will prefer .tar.gz over other extensions
      #   if multiple possibilities are given.
      #
      # version
      #   In the format "1", "1.0", "1.0.0", etc. Will be inferred from url
      #   if unspecified.
      if (not platforms)
        if (url.ends_with(".zip",&ignore_case) or url.contains("zipball",&ignore_case))
          platforms = Platforms.windows
        else
          platforms = Platforms.all
        endIf
      endIf

      if (not version)
        local lc = url.to_lowercase
        local span = lc.locate_pattern("v$(I)")
        contingent
          sufficient (span.exists)
          span = lc.locate_pattern("$(I).(I)")
          sufficient (span.exists)
          span = lc.locate_pattern("$(I)?(I)")
          sufficient (span.exists)
          span = lc.locate_pattern("$(I)")
          sufficient (span.exists)
          throw error( 'Cannot determine version number from release URL "$".'(url) )
        endContingent
        version = url.substring( span.value.index )
        local separator_index = span.value.index + span.value.count
        local separator = which{ (separator_index<url.count):url[separator_index] || '.' }
        use builder = StringBuilder.pool
          local found_numbers = false
          forEach (ch in version)
            if (ch == separator) builder.print "."
            elseIf (ch.is_number) builder.print ch; found_numbers = true
            elseIf (found_numbers) escapeForEach
          endForEach
          version = builder->String.without_trailing('.')
        endUse
      endIf

      releases.add @{ :version, :url, platforms:platforms->String, filename:filename_for_url(url) }

    method save_cache
      cache.save( File(package_folder/"cache.json") )

    method scan_repo_releases( min_version=null:String, max_version=null:String, platforms=null:Platforms )
      local info : Value

      if (cache//repo_releases)
        info = cache//repo_releases
      else
        local url = "https://api.github.com/repos/$/$/releases"(provider,repo)
        local cmd = ''curl -fsSL -H "Accept: application/vnd.github.v3+json" '' + url

        local process = Process.run( cmd )
        if (not process.success) throw Error( "Download failed: " + url )

        info = JSON.parse( process.output_string )
        cache//repo_releases = info
        save_cache
      endIf

      forEach (release_info in info)
        local v = VersionNumber( release_info//tag_name->String.after_any("v") )
        contingent
          if (specified_version)
            sufficient (v == specified_version)
          else
            if (min_version and v < min_version) nextIteration
            if (max_version and v > max_version) nextIteration
          endIf
        satisfied
          release( release_info//tarball_url, which{platforms||Platforms.unix}, v )
          release( release_info//zipball_url, which{platforms||Platforms.unix+Platforms.windows}, v )
          if (specified_version and v == specified_version) escapeForEach
        endContingent
      endForEach

    method select_version
      if (releases.is_empty) throw error( "No releases are available." )

      local platform = which{ System.is_windows:'w' || System.is_macos:'m' || 'l' }

      if (String.exists(version))
        local best = Best<<String>>( (a,b) => VersionNumber(a) > b )
        forEach (release in releases)
          local v = release//version->String
          if (VersionNumber(version).is_compatible_with(v)) best.consider( v )
        endForEach
        if (not best.exists)
          use builder = StringBuilder.pool
            builder.println "No release is compatible with requested version '$'. Available versions:" (version)
            local compatible = @{}
            forEach (release in releases)
              if (release//platforms->String.contains(platform))
                compatible[ release//version ] = release//version
              endIf
            endForEach
            block compatible = compatible.to_list<<String>>.[ sort( (a,b) => VersionNumber(a) > b ) ]
              builder.println "  " + (forEach in compatible)
            endBlock
            throw error( builder )
          endUse
        endIf
        version = best.value

      else
        local best = Best<<String>>( (a,b) => VersionNumber(a) > b )
        forEach (release in releases)
          local v = release//version->String
          best.consider( v )
        endForEach
        version = best.value

      endIf

      # Now pick the best URL with the given version number
      url = null
      forEach (release in releases)
        if (VersionNumber(release//version) == version and release//platforms->String.contains(platform))
          url = release//url
          archive_filename = release//filename
          if (not System.is_windows)
            if (url.ends_with(".tar.gz",&ignore_case)) escapeForEach
            if (url.contains("tarball")) escapeForEach
          endIf
        endIf
      endForEach
      if (not archive_filename) throw error( "No releases available." )

      install_folder = package_folder/version
      bin_folder = install_folder/"bin"

    method uninstall

    method unpack( destination_folder=".":String )
      if (not File.exists(archive_filename))
        throw error( "[INTERNAL] Must call download() before unpack()." )
      endIf

      is_unpacked = true
      if (archive_filename.ends_with(".zip",&ignore_case))
        Zip( File(archive_filename) ).extract( destination_folder )
      elseIf (archive_filename.ends_with(".tar.gz"))
        execute "tar -C $ -xvf $" (File.esc(destination_folder),File.esc(archive_filename))
      else
        throw error( "Cannot unpack() file type '.$'; write custom install() code to handle it." )
      endIf
endClass

class PackageError( package_name:String, message ) : Error
  METHODS
    method description->String
      use builder = StringBuilder.pool
        local w = message.longest_line.or_larger(80).or_smaller( Console.width )
        local hr = "=" * w
        builder.println hr
        builder.println "ERROR [$]\n" (package_name)
        builder.println message
        builder.println hr
        return builder
      endUse
endClass

class Platforms
  GLOBAL METHODS
    method all->Platforms
      return Platforms("wml")

    method linux->Platforms
      return Platforms( "l" )

    method macos->Platforms
      return Platforms( "m" )

    method unix->Platforms
      return Platforms( "ml" )

    method windows->Platforms
      return Platforms( "w" )

  PROPERTIES
    combined : String

  METHODS
    method init( combined=null, &windows, &macos, &linux )
      if (not combined) combined = ""
      if (windows and not combined.contains('w')) combined += 'w'
      if (macos and not combined.contains('m')) combined += 'm'
      if (linux and not combined.contains('l')) combined += 'l'
      if (combined == "") combined = "wml"

    method includes_linux->Logical
      return combined.contains('l')

    method includes_macos->Logical
      return combined.contains('m')

    method includes_unix->Logical
      return includes_macos or includes_linux

    method includes_windows->Logical
      return combined.contains('w')

    method is_defined->Logical
      return (combined.count > 0)

    method operator+( other:Platforms )->Platforms
      return this | other

    method operator|( other:Platforms )->Platforms
      local combo = combined
      forEach (ch in other.combined)
        if (not combo.contains(ch)) combo += ch
      endForEach
      return Platforms(combo)

    method to->String
      return combined
endClass

