uses Utility/Best

try
  forEach (type in TypeInfo.iterator)
    if (type.instance_of(<<Package>>) and type is not <<Package>>)
      local package = type.create_object<<Package>>
      package.init( System.command_line_arguments.cloned )
      package.select_version
      println "Installing $ v$" (package.name,package.version)
      println package.url
    endIf
  endForEach

catch (err:Error)
  local w = Console.width.or_smaller(80)
  local hr = "=" * w
  Console.error.println hr
  Console.error.println "ERROR\n  "
  Console.error.println err->String.word_wrapped(w-2).indented(2)
  Console.error.println hr
  System.exit 1

endTry

class Package
  PROPERTIES
    name        : String

    version     : String
    url         : String

    releases    = @[]
    properties  = @{}

  METHODS
    method init( args:String[] )
      init

    method init
      noAction

    method release( url:String, platforms=null:String, version=null:String )
      # platforms
      #   Any combination of characters w, m, l (windows, mac, linux)
      #   If unspecified then .tar.gz implies "ml" and any other extension
      #   implies "wml". Mac and Linux will prefer .tar.gz over other extensions
      #   if multiple possibilities are given.
      #
      # version
      #   In the format "1", "1.0", "1.0.0", etc. Will be inferred from url
      #   if unspecified.
      if (not platforms)
        local lc = url.to_lowercase
        platforms = which { lc.ends_with(".tar.gz"):"ml" || "wml" }
      endIf

      if (not version)
        local lc = url.to_lowercase
        local span = lc.locate_pattern("v$(I)")
        contingent
          sufficient (span.exists)
          span = lc.locate_pattern("$(I).(I)")
          sufficient (span.exists)
          span = lc.locate_pattern("$(I)?(I)")
          sufficient (span.exists)
          span = lc.locate_pattern("$(I)")
          sufficient (span.exists)
          throw error( 'cannot determine version number from release URL "$"'(url) )
        endContingent
        version = url.substring( span.value.index )
        local separator_index = span.value.index + span.value.count
        local separator = which{ (separator_index<url.count):url[separator_index] || '.' }
        use builder = StringBuilder.pool
          local found_numbers = false
          forEach (ch in version)
            if (ch == separator) builder.print "."
            elseIf (ch.is_number) builder.print ch; found_numbers = true
            elseIf (found_numbers) escapeForEach
          endForEach
          version = builder->String.without_trailing('.')
        endUse
      endIf

      releases.add @{ :version, :url, :platforms }

    method download
      #localize url
      #trace url

    method error( message:String )->Error
      return Error( "$: $."(name,message) )

    method install

    method name->String
      if (@name) return @name
      return type_name.after_any("::")

    method select_version( version=null )
      if (releases.is_empty) throw error( "no releases are available" )

      if (String.exists(version))
        local best = Best<<String>>( (a,b) => VersionNumber(a) > b )
        forEach (release in releases)
          local v = release//version->String
          trace version, v, VersionNumber(version).is_compatible_with(v)
          if (VersionNumber(version).is_compatible_with(v)) best.consider( v )
        endForEach
        if (not best.exists) throw error( "no such release '$'"(version) )
        version = best.value

      else
        local best = Best<<String>>( (a,b) => VersionNumber(a) > b )
        forEach (release in releases)
          local v = release//version->String
          best.consider( v )
        endForEach
        version = best.value

      endIf

      # Now pick the best URL with the given version number
      url = null
      local platform = which{ System.is_windows:'w' || System.is_macos:'m' || 'l' }
      forEach (release in releases)
        if (VersionNumber(release//version) == version and release//platforms->String.contains(platform))
          url = release//url
          if (not System.is_windows and url.ends_with(".tar.gz",&ignore_case)) escapeForEach
        endIf
      endForEach
endClass

#{
class Package
  PROPERTIES
    package  : String
      # E.g. https://github.com/user/repo/.../app      [or]
      #          git@github.com:user/repo.git/.../app
    repo     : String
      # E.g. https://github.com/user/repo
      #          git@github.com:user/repo.git
    app      : String
      # E.g. .../app

    homepage : String
    version  : String
    url      : String
    sha256   : String

  METHODS
    method init( repo, app )
      package = repo / app
      #{
      # name -> https://github.com/name/name/name
      #   https://github.com/user/repo/.../package -> [https://github.com/user/repo, .../package]
      contingent
        sufficient (package.contains("://"))            # http(s)://...
        sufficient (package.matches_pattern("*@*.*:*")) # git@github.com:...
        which (package.count('/'))
          case 0
            # 'repo' -> 'https://github.com/repo/repo' 'PackMan/repo.rogue'
            # User "repo", repository "repo", project "repo"
            package = "https://github.com/$/$/$" (package,package,package)

          case 1
            # 'user/repo' -> 'https://github.com/user/repo/repo'
            #             -> 'https://github.com/user/repo', 'PackMan/repo.rogue'
            local user = package.before_first( '/' )
            local repo = package.after_first( '/' )
            package = "https://github.com/$/$/$" (user,repo,repo)

          others
            # 'user/repo/[.../]package
            local user = package.before_first( '/' )
            package .= after_first( '/' )
            local repo = package.before_first( '/' )
            local package = package.after_first( '/' )
            package = "https://github.com/$/$/$" (user,repo,package)
        endWhich
      endContingent
      repo = package
      }#

    method display
      @trace package
      @trace repo
      @trace app
      @trace homepage
      @trace version
      @trace url
      @trace sha256
endClass
}#
