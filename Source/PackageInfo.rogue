class PackageInfo
  PROPERTIES
    name     : String  # abepralle/rogo, provider/app_name
    provider : String  # abepralle
    app_name : String  # rogo
    repo     : String  # rogo
    version  : String  # null, 1.0, 1.0.0, etc.
    host     : String  # github.com
    folder   : String  # /opt/morlock/packages/abepralle/rogo,            /opt/morlock/packages/provider/app_name
    filepath : String  # /opt/morlock/packages/abepralle/rogo/rogo.rogue, /opt/morlock/packages/provider/app_name.rogue
    url      : String  # https://raw.githubusercontent.com/abepralle/rogo/master/morlock/abepralle/rogo.rogue
                       # protocol://domain/provider/repo/master/morlock/provider/app_name.rogue
    installed_versions : String[]
    using_local_script : Logical  # prevents pinging repo for updates
    morlock_home       : String   # Usually /opt/morlock or %HOMEPATH%\AppData\Local\Morlock

  METHODS
    method init( morlock_home, url )
      if (url.contains('@'))
        version = url.after_last('@')
        url .= before_last('@')
      endIf

      if (url.contains("://"))
        local parts = url.extract_strings( "$://$/$" )
        if (not parts)
          local sample = "https://github.com/account/repo or https://raw.githubusercontent.com/account/repo/main/morlock/account/app_name.rogue"
          throw Error( ''Invalid URL "$" - expected e.g. "$".'' (url,sample) )
        endIf

        if (not url.ends_with(".rogue",&ignore_case))
          # URL was good enough to get started but is not the URL of a script.
          # Reconstruct URL later.
          url = null
        endIf

        # protocol = parts[0]
        host       = parts[1]
        local path = parts[2]

        app_name = File.filename(path).before_last('.')
        if (path.contains('/'))
          provider = path.before_first('/')
          repo = path.after_first('/').before_first('/')
        else
          provider = app_name
          repo = app_name
        endIf

      else
        which (url.count('/'))
          case 0
            provider = url
            app_name = url
            repo     = url
            url = null
          case 1
            provider = url.before_first('/')
            app_name = url.after_first('/')
            repo     = app_name
            url = null
          case 2
            # Assume a shorthand URL
            # EITHER
            # - host/account/repo, AKA:
            # - host/provider/app-name
            # - github.com/abepralle/rogue
            # OR
            # - provider/repo/app-name
            # - abepralle/tools/xyz
            local parts = url.split('/')
            if (parts[0] == "github" or parts[0].contains('.'))
              host     = parts[0]
              provider = parts[1]
            else
              provider = parts[0]
              repo     = parts[1]
            endIf
            app_name = parts[2]
            url  = null
          others
            # Assume a URL that's missing the https:// protocol
            init( morlock_home, "https://"+url )
            return
        endWhich

      endIf

      if (not repo) repo = app_name
      name = provider/app_name
      folder = "$/packages/$/$" (morlock_home,provider,app_name)
      filepath = "$/$.rogue" (folder,app_name)

      if (not url)
        local url_filepath = folder/"url.txt"
        if (File.exists(url_filepath))
          url = String(File(url_filepath)).trimmed
        endIf
      endIf

      if (host)
        which (host)
          case "github": host = "github.com"
        endWhich
      else
        if (url) host = url.after_any("://").before_first('/')
        else     host = "github.com"
      endIf

      installed_versions = which{ File.exists(folder):File.listing(folder,&folders,&omit_path) || String[] }
      installed_versions.sort( (a,b) => VersionNumber(a) > b )

    method fetch_latest_script
      if (not using_local_script)
        println "$ $ install script" (which{File.exists(filepath):"Updating" || "Fetching"}, name)
        if (not url)
          which (host)
            case "github.com"
              # Use the GitHub API to determine the default branch for the repo and the
              # capitalization of the Morlock folder.
              local cmd = ''curl -H "Accept: application/vnd.github.v3+json" ''
              cmd += "https://api.github.com/repos/$/$/contents"(provider,repo)
              #println "> " + cmd
              local result = Process.run( cmd, &env )
              if (not result.success)
                throw Error( "Unable to list default branch of 'github.com/$/$'."(provider,repo) )
              endIf

              local data = JSON.parse( result->String )
              if (not data.is_list)
                throw Error( "Repo does not exist: github.com/$/$"(provider,repo) )
              endIf

              local folder_info = data.first( $//name->String.equals("morlock",&ignore_case) )
              if (not folder_info)
                throw Error( "No morlock/app-name.rogue install script exists in repo." )
              endIf

              local branch = folder_info//url->String.after_last('?').after_last("ref=").before_first('&')
              if (not String.exists(branch)) branch = "main"

              url = "https://raw.githubusercontent.com/$/$/$/$/$.rogue"(provider,repo,branch,folder_info//name,app_name)

            others
              throw Error( "Morlock does not know how to construct $ URLs."(host) )

          endWhich
        endIf

        if (not File.is_folder(folder))
          println "Creating folder " + folder
          File.create_folder( folder )
        endIf

        if (execute("curl -fsSL $ -o $" (url,File.esc(filepath)), &bg, &suppress_error))
          File.save( folder/"url.txt", url )
        else
          throw Error( "Can't find Morlock install script at:\n"+url )
        endIf

        File.delete( folder/"cache.json" )  # delete any existing cache
      endIf

    method description->String
      use builder = StringBuilder.pool
        builder.println "name:"+name
        builder.println "host:"+host
        builder.println "provider:"+provider
        builder.println "repo:"+repo
        builder.println "app_name:"+app_name
        builder.println "version:"+version
        builder.println "url:"+url
        builder.println "folder:"+folder
        builder.println "filepath:"+filepath
        builder.println "using_local_script:"+using_local_script
        return builder->String
      endUse

    method execute( cmd:String, &suppress_error, &allow_sudo, &bg )->Logical
      if (not bg) println "> " + cmd
      if (0 == System.run(cmd)) return true

      if (allow_sudo)
        println "Error executing '$'; retrying with 'sudo'."(cmd)
        return execute( "sudo "+cmd, &=suppress_error )
      endIf

      if (suppress_error) return false
      throw Error( "Error executing:\n$"(cmd) )

    method package_args->Value
      return @{ :morlock_home, :version, script_filepath:filepath, :host, :repo }
endClass

