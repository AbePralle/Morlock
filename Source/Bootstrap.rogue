#================================================================================
# Bootstrap.rogue
# September 24, 2021
#================================================================================

$requireRogue "1.8.8"

uses Utility/CommandLineParser
uses Utility/Zip

class Bootstrap [singleton]
  PROPERTIES
    printed_installing_header = false

  METHODS
    method configure
      # Windows: make sure we're running from a developer command prompt or PowerShell with
      # command-line C++ support.
      if (System.is_windows)
        if (Process.run("cl").exit_code != 0)
          throw Error( "This command must be run from a Visual Studio Developer Command Prompt or Developer PowerShell with a command line C++ compiler." )
        endIf
      endIf

      # Create the Morlock home folder
      if (not File.is_folder(Morlock.HOME))
        print_installing_header
        println "Creating home folder..."
        Morlock.create_folder( Morlock.HOME, &chown )
      endIf

      # Create primary subfolders
      Morlock.create_folder( Morlock.HOME/"bin" )
      Morlock.create_folder( Morlock.HOME/"build" )
      Morlock.create_folder( Morlock.HOME/"packages" )

      # Make sure Morlock.HOME/bin is on the system PATH before proceeding.
      local binpath = File.conventional_filepath( Morlock.HOME/"bin" )
      contingent
        local path = System.env//PATH
        necessary (path)
        necessary (path.split(':').contains(binpath))

      unsatisfied
        print_installing_header
        Morlock.header
        println "Add the following folder to your system PATH and then re-run Morlock:"
        println binpath
        println
        if (System.is_windows)
          println "On Windows:"
          println ''- Search for "env" and run "Edit the system environment variables".''
          println ''- Click "Environment Variables..." near the bottom.''
          println ''- Add or edit "Path" in the top "User variables" section.''
          println ''- Add the Morlock "bin" folder to the path:''
          println ''  '' + binpath
        else
          local shell = System.env//SHELL
          contingent
            necessary (shell)
            shell = "~/.$rc" (File.filename(shell))
            necessary (File.exists(shell))
            println "You can add this line to your $ (etc.) and reopen your terminal:" (shell)
            println ''export PATH="'' + binpath + ''":$PATH''
            println
            println "Or copy and paste this command to perform both steps:"
            println ''echo export PATH="$":\\$PATH >> $ && source $''(binpath,'$',shell,shell)
          unsatisfied
            println "You can add this line to your ~/.bashrc (etc.) and reopen your terminal:"
            println ''export PATH="'' + binpath + ''":$PATH''
          endContingent
        endIf
        Morlock.header
        System.exit 1
      endContingent

      install_rogue
      install_rogo
      install_morlock

    method execute( cmd:String, error_message=null:String, &suppress_error, &bg )->Logical
      if (not bg) println "> " + cmd
      if (0 == System.run(cmd)) return true
      if (suppress_error) return false
      if (not error_message) error_message = "Error executing:\n"+cmd
      throw Error( error_message )

    method install_morlock
      if (File.exists(Morlock.HOME/"bin/morlock")) return

      # Can use the regular system to install the latest Morlock.
      # If the remaining code in this method executes on Windows it's probably a bootstrap
      # executable and may be out of date.
      local package = Package( Morlock.HOME, "https://github.com/abepralle/morlock" )
      package.scan_repo_releases
      package.select_version
      if (File.exists(package.install_folder) and not File.listing(package.install_folder).is_empty)
        println "$ v$ is already installed." (package.name,package.version)
        return
      endIf

      local build_folder = Morlock.HOME/"build/abepralle/morlock"
      File.delete( build_folder )
      Morlock.create_folder( build_folder )

      package.archive_filename = build_folder/package.archive_filename

      package.download
      package.unpack( build_folder )

      local archive_folder : String
      forEach (folder in File.listing(build_folder,&folders))
        if (File.exists(folder/"Build.rogue"))
          archive_folder = folder
          escapeForEach
        endIf
      endForEach
      if (not archive_folder) throw Error( "Failed to find extracted source folder in: "+build_folder )
      package.archive_folder = archive_folder

      local install_folder   = package.install_folder
      Morlock.create_folder( install_folder )
      Morlock.header( "Compiling morlock..." )
      execute( "(cd $ && rogo build)" (File.esc(archive_folder)) )

      package.install_executable

    method install_rogo
      if (File.exists(Morlock.HOME/"bin/rogo")) return

      local package = Package( Morlock.HOME, "https://github.com/abepralle/rogo" )
      package.scan_repo_releases
      package.select_version
      if (File.exists(package.install_folder) and not File.listing(package.install_folder).is_empty)
        println "$ v$ is already installed." (package.name,package.version)
        return
      endIf

      local build_folder = Morlock.HOME/"build/abepralle/rogo"
      File.delete( build_folder )
      Morlock.create_folder( build_folder )

      package.archive_filename = build_folder/package.archive_filename

      package.download
      package.unpack( build_folder )

      local archive_folder : String
      forEach (folder in File.listing(build_folder,&folders))
        if (File.exists(folder/"Makefile"))
          archive_folder = folder
          escapeForEach
        endIf
      endForEach
      if (not archive_folder) throw Error( "Failed to find extracted source folder in: "+build_folder )
      package.archive_folder = archive_folder

      local install_folder   = package.install_folder
      Morlock.create_folder( install_folder )
      Morlock.header( "Compiling rogo..." )
      execute( "(cd $ && make build)" (File.esc(archive_folder)) )

      package.install_executable

    method install_rogue
      if (File.exists(Morlock.HOME/"bin/roguec")) return

      local package = Package( Morlock.HOME, "https://github.com/abepralle/rogue" )
      package.scan_repo_releases
      package.select_version
      if (File.exists(package.install_folder) and not File.listing(package.install_folder).is_empty)
        println "$ v$ is already installed." (package.name,package.version)
        return
      endIf

      local build_folder = Morlock.HOME/"build/abepralle/rogue"
      File.delete( build_folder )
      Morlock.create_folder( build_folder )

      package.archive_filename = build_folder/package.archive_filename

      package.download
      package.unpack( build_folder )

      local archive_folder : String
      local makefile = which{ System.is_windows:"make.bat" || "Makefile" }
      forEach (folder in File.listing(build_folder,&folders))
        if (File.exists(folder/makefile))
          archive_folder = folder
          escapeForEach
        endIf
      endForEach
      if (not archive_folder) throw Error( "Failed to find extracted source folder in: "+build_folder )
      package.archive_folder = archive_folder

      local install_folder   = package.install_folder
      local libraries_folder = install_folder
      Morlock.create_folder( libraries_folder )

      Morlock.header( "Compiling roguec - this may take a while..." )
      if (System.is_windows)
        execute( "cd $ && make build" (File.esc(archive_folder)) )
        execute( "xcopy /I /S /Q /Y Source\\Libraries $" (File.esc(install_folder)) )
      else
        execute( "(cd $ && make build LIBRARIES_FOLDER=$)" (File.esc(archive_folder),File.esc(install_folder)) )
      endIf

      package.install_executable( &dest_filename="roguec" )

    method print_installing_header
      if (printed_installing_header) return
      printed_installing_header = true
      Morlock.header( "Installing the Morlock Package Management System" )
endClass

