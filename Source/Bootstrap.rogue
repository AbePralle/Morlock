#================================================================================
# Bootstrap.rogue
# September 24, 2021
#================================================================================

$requireRogue "1.8.8"

uses Utility/Zip

class Bootstrap [singleton]
  PROPERTIES
    cmd : Value
    printed_installing_header = false

  METHODS
    method configure( cmd )
      # Windows: make sure we're running from a developer command prompt with
      # command-line C++ support.
      if (System.is_windows)
        if (Process.run("cl").exit_code != 0)
          local mesg = "This command must be run from a Visual Studio Developer Command Prompt that supports C++. "
          if (cmd//options//installer)
            mesg += "Open a Developer Command Prompt and re-run:\n"
            mesg += cmd//options//installer
          else
            mesg += "Open a Developer Command Prompt and re-run morlock."
          endIf
          throw Error( mesg )
        endIf
      endIf

      # Create the Morlock home folder
      if (not File.is_folder(Morlock.HOME))
        print_installing_header
        println "Creating home folder..."
        Morlock.create_folder( Morlock.HOME, &chown )
      endIf

      # Create primary subfolders
      Morlock.create_folder( Morlock.HOME/"bin" )
      Morlock.create_folder( Morlock.HOME/"build" )
      Morlock.create_folder( Morlock.HOME/"packages" )

      # Make sure Morlock.HOME/bin is on the system PATH before proceeding.
      local binpath = File.conventional_filepath( Morlock.HOME/"bin" )
      contingent
        local path_name = System.env.names.find( (name)=>name.equals("path",&ignore_case) )
        necessary (path_name.exists)
        local paths = System.env[path_name.value]
        necessary (paths)
        local separator = which{ System.is_windows:';' || ':' }
        necessary (paths.split(separator).find(
          (path) with (binpath) => path.equals(binpath,&ignore_case) ).exists
        )

      unsatisfied
        print_installing_header
        Morlock.header
        if (System.is_windows)
          println "Add the following folder to your system Path:"
          println binpath
          println
          println ''1. Start > Search for "env" > run "Edit the system environment variables".''
          println ''2. Click "Environment Variables..." near the bottom.''
          println ''3. Add or edit "Path" in the top "User variables" section.''
          println ''4. Add the Morlock "bin" folder to the path:''
          println ''  '' + binpath
          if (cmd//options//installer)
            println ''5. Open a new Developer Command Prompt and re-run:''
            println ''   '' + cmd//options//installer
          else
            println ''5. Open a new Developer Command Prompt and re-run morlock.''
          endIf
        else
          println "Add the following folder to your system PATH and re-run the Morlock install command:"
          println binpath
          println
          local shell = System.env//SHELL
          contingent
            necessary (shell)
            shell = "~/.$rc" (File.filename(shell))
            necessary (File.exists(shell))
            println "You can execute this command to make the change:"
            println ''echo export PATH="$":\\$PATH >> $ && source $''(binpath,'$',shell,shell)
          unsatisfied
            println "Make the change by adding this line to your ~/.bashrc (etc.) and reopening your"
            println "terminal:"
            println ''export PATH="'' + binpath + ''":$PATH''
          endContingent
        endIf
        Morlock.header
        System.exit 1
      endContingent

      install_rogue
      install_rogo
      install_morlock

      delete_unused_package_versions

    method delete_unused_package_versions
      forEach (folder in File.listing(Morlock.HOME/"packages/*/*",&ignore_hidden,&folders))
        local v_filepath = folder/"active_version.txt"
        if (File.exists(v_filepath))
          local active_v = String(File(v_filepath)).trimmed
          forEach (v_folder in File.listing(folder/"*",&ignore_hidden,&folders))
            if (File.filename(v_folder) != active_v)
              File.delete( v_folder )
            endIf
          endForEach
        endIf
      endForEach

    method execute( cmd:String, error_message=null:String, &suppress_error, &quiet )->Logical
      if (not quiet) println "> " + cmd
      if (0 == System.run(cmd)) return true
      if (suppress_error) return false
      if (not error_message) error_message = "Error executing:\n"+cmd
      throw Error( error_message )

    method package_instance( url:String )->Package
      local info = PackageInfo( Morlock.HOME, url )
      return Package( info.name, info.package_args )

    method install_morlock
      local ext = which{ System.is_windows:".bat" || "" }
      local bin_filepath = "$/bin/morlock$" (Morlock.HOME,ext)
      if (File.exists(bin_filepath)) return

      # Can use the regular system to install the latest Morlock.
      # If the remaining code in this method executes on Windows it's probably a bootstrap
      # executable and may be out of date.
      local package = package_instance( "https://github.com/abepralle/morlock" )
      package.scan_repo_releases
      package.select_version
      if (File.exists(package.install_folder) and not File.listing(package.install_folder).is_empty)
        println "$ v$ is already installed." (package.name,package.version)
        return
      endIf

      local build_folder = Morlock.HOME/"build/abepralle/morlock"
      File.delete( build_folder )
      Morlock.create_folder( build_folder )

      package.archive_filename = build_folder/package.archive_filename

      package.download
      package.unpack( build_folder )

      local archive_folder : String
      forEach (folder in File.listing(build_folder,&folders))
        if (File.exists(folder/"Build.rogue"))
          archive_folder = folder
          escapeForEach
        endIf
      endForEach
      if (not archive_folder) throw Error( "Failed to find extracted source folder in: "+build_folder )
      package.archive_folder = archive_folder

      local install_folder   = package.install_folder
      Morlock.create_folder( install_folder )
      Morlock.header( "Compiling morlock..." )
      execute( "(cd $ && rogo build)" (File.esc(archive_folder)) )

      package.install_executable
      File.save( File.folder(package.install_folder)/"active_version.txt", package.version )

      local src = Files( archive_folder/"Source", "*.rogue" )
      File.sync_from( src, install_folder/"Source" )

      File.delete( build_folder )

    method install_rogo
      local ext = which{ System.is_windows:".bat" || "" }
      local bin_filepath = "$/bin/rogo$" (Morlock.HOME,ext)
      if (File.exists(bin_filepath)) return

      local package = package_instance( "https://github.com/abepralle/rogo" )
      package.scan_repo_releases
      package.select_version
      if (File.exists(package.install_folder) and not File.listing(package.install_folder).is_empty)
        println "$ v$ is already installed." (package.name,package.version)
        return
      endIf

      local build_folder = Morlock.HOME/"build/abepralle/rogo"
      File.delete( build_folder )
      Morlock.create_folder( build_folder )

      package.archive_filename = build_folder/package.archive_filename

      package.download
      package.unpack( build_folder )

      local archive_folder : String
      forEach (folder in File.listing(build_folder,&folders))
        if (File.exists(folder/"Makefile"))
          archive_folder = folder
          escapeForEach
        endIf
      endForEach
      if (not archive_folder) throw Error( "Failed to find extracted source folder in: "+build_folder )
      package.archive_folder = archive_folder

      local install_folder   = package.install_folder
      Morlock.create_folder( install_folder )
      Morlock.header( "Compiling rogo..." )
      execute( "(cd $ && make build)" (File.esc(archive_folder)) )

      package.install_executable

      File.save( File.folder(package.install_folder)/"active_version.txt", package.version )

      File.delete( build_folder )

    method install_rogue
      local ext = which{ System.is_windows:".bat" || "" }
      local bin_filepath = "$/bin/roguec$" (Morlock.HOME,ext)
      if (File.exists(bin_filepath)) return

      local package = package_instance( "https://github.com/abepralle/rogue" )
      package.scan_repo_releases
      package.select_version
      if (File.exists(package.install_folder) and not File.listing(package.install_folder).is_empty)
        println "$ v$ is already installed." (package.name,package.version)
        return
      endIf

      local build_folder = Morlock.HOME/"build/abepralle/rogue"
      File.delete( build_folder )
      Morlock.create_folder( build_folder )

      package.archive_filename = build_folder/package.archive_filename

      package.download
      package.unpack( build_folder )

      local archive_folder : String
      local makefile = which{ System.is_windows:"make.bat" || "Makefile" }
      forEach (folder in File.listing(build_folder,&folders))
        if (File.exists(folder/makefile))
          archive_folder = folder
          escapeForEach
        endIf
      endForEach
      if (not archive_folder) throw Error( "Failed to find extracted source folder in: "+build_folder )
      package.archive_folder = archive_folder

      local install_folder   = package.install_folder
      local libraries_folder = install_folder
      Morlock.create_folder( libraries_folder )

      if (System.is_windows)
        Morlock.header( "Compiling roguec..." )
      else
        Morlock.header( "Compiling roguec - this may take a while..." )
      endIf
      if (System.is_windows)
        execute( "cd $ && make build" (File.esc(archive_folder)) )
        execute( "xcopy /I /S /Q /Y $ $"...
          (File.esc(archive_folder/"Source/Libraries"),File.esc(install_folder/"Libraries")) )
      else
        execute( "(cd $ && make build LIBRARIES_FOLDER=$)" (File.esc(archive_folder),File.esc(install_folder)) )
      endIf

      local dest_filename = which{ System.is_windows:"roguec.exe" || "roguec" }
      package.install_executable( &=dest_filename )

      File.save( File.folder(package.install_folder)/"active_version.txt", package.version )

      File.delete( build_folder )

    method print_installing_header
      if (printed_installing_header) return
      printed_installing_header = true
      Morlock.header( "Installing the Morlock Package Management System" )
endClass

